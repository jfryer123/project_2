// console.ldog(process.env.MONGODB_URI);

//___________________
//Dependencies
//___________________
const express = require('express');
const methodOverride  = require('method-override');
const mongoose = require ('mongoose');
const session = require('express-session')
const db = mongoose.connection;
require('dotenv').config()
const app = express ();
//___________________
//Port
//___________________
const PORT = process.env.PORT || 3000;
const MONGODB_URI = process.env.MONGODB_URI;


//___________________
//Middleware
//___________________

app.use(express.static('public'));
app.use(methodOverride('_method'))
app.use(express.urlencoded({ extended: false }));
app.use(express.json());// returns middleware that only parses JSON - may or may not need it depending on your project
app.use(session({
  secret: process.env.SECRET,
  resave: false,
  saveUninitialized: false
}))
app.use(methodOverride('_method'));// allow POST, PUT and DELETE from a form

//___________________
//Database
//___________________

// mongoose.set('useFindAndModify', false);
// mongoose.set('useCreateIndex', true);

// Connect to Mongo
mongoose.connect(MONGODB_URI ,  { useNewUrlParser: true});
mongoose.connection.once('open', ()=> {
  console.log('connected to mongo', MONGODB_URI)
})

// Error / success
// db.on('error', (err) => console.log(err.message + ' is Mongod not running?'));
// db.on('connected', () => console.log('mongo connected: ', MONGODB_URI));
// db.on('disconnected', () => console.log('mongo disconnected'));


//___________________
// Routes
//___________________
//localhost:3000
app.get('/' , (req, res) => {
  res.render('index.ejs', (req, res) => {
    currentUser: req.session.currentUser
  })
});

app.get('/app', (req, res)=>{
  if(req.session.currentUser){
        res.render('app/index.ejs')
    } else {
        res.redirect('/sessions/new');
    }
})

const userController = require('./controllers/users.js')
app.use('/users', userController)

const sessionsController = require('./controllers/sessions.js')
app.use('/sessions', sessionsController)

//___________________
//Listener
//___________________
app.listen(PORT, () => console.log( 'Listening on port:', PORT));
